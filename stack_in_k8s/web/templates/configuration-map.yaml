####################################
# Core Helm Template Configuration #
####################################

apiVersion: v1
kind: ConfigMap

######################################
# Basic Metadata for this Deployment #
######################################

metadata:
  name: "{{ .Chart.Name }}-{{ .Values.web.configurationMap.meta.name }}"

##########################
# Configuration Map Data #
##########################

data: 

  #################################################
  # Kubernetes-Specific Application Configuration #
  #################################################

  application-k8s.yml: |
    hazelcast:
      client:
        k8s:
          service-dns-name: {{ .Chart.Name }}-{{ .Values.web.cacheService.meta.name }}.default.svc.cluster.local
  
  #############################
  # Application Configuration #
  #############################

  application.yml: |
    datawave:
      authorization:
        uri: "https://{{ .Chart.Name }}-{{ .Values.web.authorizationService.meta.name }}:{{ .Values.web.authorizationService.ports.https }}/{{ .Values.web.authorizationService.endpoints.authorize }}"
    logging:
      level:
        root: DEBUG
    management:
      endpoint.health.show-details: when-authorized
      endpoints.web.base-path: /mgmt
      endpoints.web.exposure.include: "*"
    server:
      non-secure-port: 8080
      outbound-ssl:
        key-store: ${server.ssl.key-store}
        key-store-password: ${server.ssl.key-store-password}
        key-store-type: ${server.ssl.key-store-type}
        trust-store: ${server.ssl.trust-store}
        trust-store-password: ${server.ssl.trust-store-password}
        trust-store-type: ${server.ssl.trust-store-type}
      port: 8443
      servlet.context-path: /${spring.application.name}
      ssl:
        client-auth: WANT
        key-store: '{{ .Values.web.secrets.keystore.path }}'
        key-store-password: '{{ .Values.web.secrets.keystore.password }}'
        key-store-type: '{{ .Values.web.secrets.keystore.type }}'
        trust-store: '{{ .Values.web.secrets.truststore.path }}'
        trust-store-type: '{{ .Values.web.secrets.truststore.type }}'
        trust-store-password: '{{ .Values.web.secrets.truststore.password }}'
    spring:
      cloud:
        consul:
          enabled: false
      rabbitmq:
        discovery:
          enabled: false
          failFast: true
        host: '{{ .Chart.Name }}-{{ .Values.web.messagingDeployment.meta.name }}'
      security:
        datawave:
          enforce-allowed-callers: false
          issuers-required: true
          jwt.ttl: 86400
          manager-role: Administator,JBossAdministrator
        user.password: passwordNotUsed

  #######################
  # Audit Configuration #
  #######################

  audit.yml: |
    audit:
      auditors:
        accumulo:
          enabled: false
        file:
          enabled: false
          maxFileAgeSeconds: 60
          maxLengthFileMB: 1
          pathUri: s3a://signus-audits/
        log:
          enabled: false
    logging:
      level:
        datawave.microservice.audit: DEBUG
    spring:
      cloud:
        stream:
          bindings:
            accumuloAuditSink:
              destination: audit
              group: accumulo
            auditSource:
              destination: audit
            logAuditSink:
              destination: audit
              group: log
          rabbit:
            bindings:
              accumuloAuditSink:
                consumer:
                  autoBindDlq: true
              auditSource:
                producer:
                  repbulishToDlq: true
              logAuditSink:
                consumer:
                  autoBindDlq: true

  ###############################
  # Authorization Configuration #
  ###############################

  authorization.yml: |
    greybox:
      authorization.uri: '{{ .Values.web.external.service.auth.url }}'
      casport.specification: '{{ .Values.web.external.service.auth.specification }}'
      normalize.subject: false
    logging:
      level:
        datawave.microservice.authorization: DEBUG
    mock:
      users:
        global-roles-to-auths:
          Administrator: DW_ADMIN
          AuthorizedUser: AUTH_USER
          JBossAdministrator: JBOSS_ADMIN
          barRole: BAR
          fooRole: FOO
          privateRole: PRIVATE
          PublicRole: PUBLIC
        per-user-roles-to-auths:
          '[cn=test a. user, ou=example developers, o=example corp, c=us<cn=example corp ca, o=example corp, c=us>]':
            Administrator: DW_ADMIN
            AuthorizedUser: DW_USER
            JBossAdministrator: JBOSS_ADMIN
            PRivateRole: PRIVATE
            PublicRole: PUBLIC
          '[cn=testserver.example.com, ou=servers, o=example corp, c=us<cn=example corp ca, o=example corp, c=us]':
            AuthorizedServer: DW_SERV
            PublicRole: PUBLIC
            PrivateRole: PRIVATE
        server-DN-regex: '.*server.*'
    server:
      ssl:
        client-auth: NEED
    spring:
      security:
        datawave:
          use-trusted-subject-headers: true
          oauth:
            refreshTokenTtl: 86400
            authCodeTtl: 86400
            idTokenTtl: 86400
    
  ###########################################
  # Kubernetes-Specific Cache Configuration #
  ###########################################

  cache-k8s.yml: |
    hazelcast:
      server:
        k8s:
          service-dns-name: {{ .Chart.Name }}-{{ .Values.web.cacheService.meta.name }}.default.svc.cluster.local

  #######################
  # Cache Configuration #
  #######################

  cache.yml: |
    hazelcast:
      network:
        join:
          multicast:
            enabled: false
          kubernetes:
            enabled: true
      server:
        initialMergeDelaySeconds: 50
        xml-config: |
          <hazelcast 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://www.hazelcast.com/schema/config http://www.hazelcast.com/schema/config/hazelcast-config-3.9.xsd"
              xmlns="http://www.hazelcast.com/schema/config">
            <map name="datawaveUsers">
              <backup-count>1</backup-count>
              <eviction-policy>LFU</eviction-policy>
              <max-size policy="USED_HEAP_SIZE">50</max-size>
              <time-to-live-seconds>86400</time-to-live-seconds>
            </map>
          </hazelcast>

    logging:
      level:
        root: TRACE
    server:
      port: 8080
      ssl:
        enabled: false
    spring:
      cloud:
        consul:
          enabled: false
      security:
        datawave:
          jwt:
            enabled: false
  
  ############################
  # Dictionary Configuration #
  ############################

  dictionary.yml: |
    datawave:
      dictionary:
        accumulo-properties:
          instance-name: "{{ .Values.web.accumulo.instanceName }}"
          password: "{{ .Values.web.accumulo.password }}"
          username: "{{ .Values.web.accumulo.user }}"
          zookeepers: "{{ .Values.web.zookeeper.quorum }}"
        edge:
          metadata-table-name: ${metadata.tabl.name:datawave.metadata}
          num-threads: 8
        data:
          model-name: DATAWAVE
          metadata-table-name: ${metadata.table.name:datawave.metadata}
          model-table-name: ${metadata.table.name:datawave.metadata}
          normalizer-map:
            "[datawave.data.type.GeoLatType]": "Latitude"
            "[datawave.data.type.GeoLonType]": "Longitude"
            "[datawave.data.type.GeometryType]": "Geometry (WKT)"
            "[datawave.data.type.GeoType]": "Combined latitude, longitude"
            "[datawave.data.type.IpAddressType]": "IP address"
            "[datawave.data.type.MacAddressType]": "MAC address"
            "[datawave.data.type.LcNoDiacriticsType]": "Text"
            "[datawave.data.type.LcType]": "Text"
            "[datawave.data.type.NoOpType]": "Unnormalized Text"
            "[datawave.data.type.NumberType]": "Number"
            "[datawave.data.type.PointType]": "Point Geometry (WKT)"
            "[datawave.data.type.TrimLeadingZerosType]": "Text"
          num-threads: 8
      metadata:
        all-metadata-auths:
          - PUBLIC
        type-substitutions:
          "[datawave.data.type.DataType]": "datawave.data.type.RawDataType"
    server:
      cdnUri: /dictionary/
    spring:
      security:
        datawave:
          use-trusted-subject-headers: true
